
AVRASM ver. 2.1.9  tahometr.asm Fri Nov 22 17:31:14 2013

tahometr.asm(989): Including file 'tahometr.vec'
tahometr.asm(990): Including file 'tahometr.inc'
tahometr.inc(4): warning: Register r5 already defined by the .DEF directive
tahometr.asm(990): 'tahometr.inc' included form here
tahometr.inc(5): warning: Register r6 already defined by the .DEF directive
tahometr.asm(990): 'tahometr.inc' included form here
tahometr.inc(6): warning: Register r8 already defined by the .DEF directive
tahometr.asm(990): 'tahometr.inc' included form here
tahometr.inc(7): warning: Register r10 already defined by the .DEF directive
tahometr.asm(990): 'tahometr.inc' included form here
tahometr.inc(8): warning: Register r12 already defined by the .DEF directive
tahometr.asm(990): 'tahometr.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.8 Standard
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : Yes
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "tahometr.vec"
                 
                 ;INTERRUPT VECTORS
000000 c017      	RJMP __RESET
000001 c09a      	RJMP _ext_int0_isr
000002 cffd      	RJMP 0x00
000003 c0db      	RJMP _timer2_comp_isr
000004 c0ac      	RJMP _timer2_ovf_isr
000005 cffa      	RJMP 0x00
000006 c09e      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 	.INCLUDE "tahometr.inc"
                 
                 _diodes:
000013 7a7b
000014 7078
000015 4060
tahometr.inc(3): warning: .cseg .db misalignment - padding zero byte
tahometr.asm(990): 'tahometr.inc' included form here
000016 0000      	.DB  0x7B,0x7A,0x78,0x70,0x60,0x40,0x0
                 	.DEF _cur_line=R5
                 	.DEF _indication=R6
                 	.DEF _x=R8
                 	.DEF _y=R10
                 	.DEF _num=R12
                 
                 __GLOBAL_INI_TBL:
000017 0000      	.DW  0
                 _0x33:
                 
                 __RESET:
000018 94f8      	CLI
000019 27ee      	CLR  R30
00001a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00001b e0f1      	LDI  R31,1
00001c bffb      	OUT  GICR,R31
00001d bfeb      	OUT  GICR,R30
00001e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00001f e1f8      	LDI  R31,0x18
000020 bdf1      	OUT  WDTCR,R31
000021 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000022 e08d      	LDI  R24,13
000023 e0a2      	LDI  R26,2
000024 27bb      	CLR  R27
                 __CLEAR_REG:
000025 93ed      	ST   X+,R30
000026 958a      	DEC  R24
000027 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000028 e080      	LDI  R24,LOW(0x400)
000029 e094      	LDI  R25,HIGH(0x400)
00002a e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00002b 93ed      	ST   X+,R30
00002c 9701      	SBIW R24,1
00002d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00002e e2ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00002f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000030 9185      	LPM  R24,Z+
000031 9195      	LPM  R25,Z+
000032 9700      	SBIW R24,0
000033 f061      	BREQ __GLOBAL_INI_END
000034 91a5      	LPM  R26,Z+
000035 91b5      	LPM  R27,Z+
000036 9005      	LPM  R0,Z+
000037 9015      	LPM  R1,Z+
000038 01bf      	MOVW R22,R30
000039 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00003a 9005      	LPM  R0,Z+
00003b 920d      	ST   X+,R0
00003c 9701      	SBIW R24,1
00003d f7e1      	BRNE __GLOBAL_INI_LOOP
00003e 01fb      	MOVW R30,R22
00003f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(0x45F)
000041 bfed      	OUT  SPL,R30
000042 e0e4      	LDI  R30,HIGH(0x45F)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(0x160)
000045 e0d1      	LDI  R29,HIGH(0x160)
                 
000046 c09d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 ;       1 #include <mega8.h>
                 ;       2 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;       3 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;       4 	.EQU __se_bit=0x80
                 	.EQU __se_bit=0x80
                 ;       5 	.EQU __sm_mask=0x70
                 	.EQU __sm_mask=0x70
                 ;       6 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powerdown=0x20
                 ;       7 	.EQU __sm_powersave=0x30
                 	.EQU __sm_powersave=0x30
                 ;       8 	.EQU __sm_standby=0x60
                 	.EQU __sm_standby=0x60
                 ;       9 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_ext_standby=0x70
                 ;      10 	.EQU __sm_adc_noise_red=0x10
                 	.EQU __sm_adc_noise_red=0x10
                 ;      11 	.SET power_ctrl_reg=mcucr
                 	.SET power_ctrl_reg=mcucr
                 ;      12 	#endif
                 	#endif
                 ;      13 #include <delay.h>
                 ;      14 
                 ;      15 
                 ;      16 #define line1 PORTB.1
                 ;      17 #define line2 PORTB.7
                 ;      18 #define line3 PORTB.6
                 ;      19 #define line4 PORTB.0
                 ;      20 
                 ;      21 flash char diodes[] = {
                 
                 	.CSEG
                 ;      22 0b01111011,
                 ;      23 0b01111010,
                 ;      24 0b01111000,
                 ;      25 0b01110000,
                 ;      26 0b01100000,
                 ;      27 0b01000000,
                 ;      28 0b00000000
                 ;      29 };
                 ;      30 
                 ;      31 char l_o[4], cur_line;
                 
                 	.DSEG
                 _l_o:
000160           	.BYTE 0x4
                 ;      32 
                 ;      33 unsigned int indication;
                 ;      34 int x, y;
                 ;      35 
                 ;      36 int num;
                 ;      37 int l;
                 _l:
000164           	.BYTE 0x2
                 ;      38 int s;
                 _s:
000166           	.BYTE 0x2
                 ;      39 
                 ;      40 void recoding(void)
                 ;      41 {
                 
                 	.CSEG
                 _recoding:
                 ;      42 
                 ;      43 
                 ;      44 switch (l)
000047 91e0 0164 	LDS  R30,_l
000049 91f0 0165 	LDS  R31,_l+1
                 ;      45   {
                 ;      46   case 0:{l_o[0]=s;l_o[1]=0;l_o[2]=0;l_o[3]=0;break;};
00004b 9730      	SBIW R30,0
00004c f451      	BRNE _0x6
00004d 91e0 0166 	LDS  R30,_s
00004f 93e0 0160 	STS  _l_o,R30
000051 e0e0      	LDI  R30,LOW(0)
000052 93e0 0161 	__PUTB1MN _l_o,1
000054 93e0 0162 	__PUTB1MN _l_o,2
000056 c042      	RJMP _0x2F
                 ;      47   case 1:{l_o[0]=7;l_o[1]=s;l_o[2]=0;l_o[3]=0;break;};
                 _0x6:
000057 30e1      	CPI  R30,LOW(0x1)
000058 e0a0      	LDI  R26,HIGH(0x1)
000059 07fa      	CPC  R31,R26
00005a f471      	BRNE _0x7
00005b e0e7      	LDI  R30,LOW(7)
00005c 93e0 0160 	STS  _l_o,R30
00005e e6a1
00005f e0b1      	__POINTW2MN _l_o,1
000060 91e0 0166 	LDS  R30,_s
000062 91f0 0167 	LDS  R31,_s+1
000064 93ec      	ST   X,R30
000065 e0e0      	LDI  R30,LOW(0)
000066 93e0 0162 	__PUTB1MN _l_o,2
000068 c030      	RJMP _0x2F
                 ;      48   case 2:{l_o[0]=7;l_o[1]=7;l_o[2]=s;l_o[3]=0;break;};
                 _0x7:
000069 30e2      	CPI  R30,LOW(0x2)
00006a e0a0      	LDI  R26,HIGH(0x2)
00006b 07fa      	CPC  R31,R26
00006c f471      	BRNE _0x8
00006d e0e7      	LDI  R30,LOW(7)
00006e 93e0 0160 	STS  _l_o,R30
000070 93e0 0161 	__PUTB1MN _l_o,1
000072 e6a2
000073 e0b1      	__POINTW2MN _l_o,2
000074 91e0 0166 	LDS  R30,_s
000076 91f0 0167 	LDS  R31,_s+1
000078 93ec      	ST   X,R30
000079 e0e0      	LDI  R30,LOW(0)
00007a c01e      	RJMP _0x2F
                 ;      49   case 3:{l_o[0]=7;l_o[1]=7;l_o[2]=7;l_o[3]=s;break;};
                 _0x8:
00007b 30e3      	CPI  R30,LOW(0x3)
00007c e0a0      	LDI  R26,HIGH(0x3)
00007d 07fa      	CPC  R31,R26
00007e f479      	BRNE _0x9
00007f e0e7      	LDI  R30,LOW(7)
000080 93e0 0160 	STS  _l_o,R30
000082 93e0 0161 	__PUTB1MN _l_o,1
000084 93e0 0162 	__PUTB1MN _l_o,2
000086 e6a3
000087 e0b1      	__POINTW2MN _l_o,3
000088 91e0 0166 	LDS  R30,_s
00008a 91f0 0167 	LDS  R31,_s+1
00008c 93ec      	ST   X,R30
00008d c00d      	RJMP _0x5
                 ;      50   case 4:{l_o[0]=7;l_o[1]=7;l_o[2]=7;l_o[3]=7;break;};
                 _0x9:
00008e 30e4      	CPI  R30,LOW(0x4)
00008f e0a0      	LDI  R26,HIGH(0x4)
000090 07fa      	CPC  R31,R26
000091 f449      	BRNE _0x5
000092 e0e7      	LDI  R30,LOW(7)
000093 93e0 0160 	STS  _l_o,R30
000095 93e0 0161 	__PUTB1MN _l_o,1
000097 93e0 0162 	__PUTB1MN _l_o,2
                 _0x2F:
000099 93e0 0163 	__PUTB1MN _l_o,3
                 ;      51   }
                 _0x5:
                 ;      52 }
00009b 9508      	RET
                 ;      53 
                 ;      54 
                 ;      55 // External Interrupt 0 service routine
                 ;      56 interrupt [EXT_INT0] void ext_int0_isr(void)
                 ;      57 {
                 _ext_int0_isr:
00009c 93ea      	ST   -Y,R30
00009d 93fa      	ST   -Y,R31
                 ;      58 indication=TCNT1;
00009e b46c
00009f b47d      	__INWR 6,7,44
                 ;      59 
                 ;      60 TCNT1=0x00;
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 e0f0      	LDI  R31,HIGH(0)
0000a2 bdfd      	OUT  0x2C+1,R31
0000a3 bdec      	OUT  0x2C,R30
                 ;      61 }
0000a4 c009      	RJMP _0x32
                 ;      62 
                 ;      63 interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ;      64 {
                 _timer1_compa_isr:
0000a5 93ea      	ST   -Y,R30
0000a6 93fa      	ST   -Y,R31
                 ;      65 indication=3760;
0000a7 ebe0      	LDI  R30,LOW(3760)
0000a8 e0fe      	LDI  R31,HIGH(3760)
0000a9 013f      	MOVW R6,R30
                 ;      66 TCNT1=0x00;
0000aa e0e0      	LDI  R30,LOW(0)
0000ab e0f0      	LDI  R31,HIGH(0)
0000ac bdfd      	OUT  0x2C+1,R31
0000ad bdec      	OUT  0x2C,R30
                 ;      67 }
                 _0x32:
0000ae 91f9      	LD   R31,Y+
0000af 91e9      	LD   R30,Y+
0000b0 9518      	RETI
                 ;      68 
                 ;      69 interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ;      70 {
                 _timer2_ovf_isr:
0000b1 920a      	ST   -Y,R0
0000b2 93ea      	ST   -Y,R30
0000b3 93fa      	ST   -Y,R31
0000b4 b7ef      	IN   R30,SREG
0000b5 93ea      	ST   -Y,R30
                 ;      71 switch (cur_line)
0000b6 2de5      	MOV  R30,R5
                 ;      72   {
                 ;      73   case 0:{line4=0;line1=1;PORTD=diodes[l_o[cur_line]];break;};
0000b7 30e0      	CPI  R30,0
0000b8 f419      	BRNE _0xE
0000b9 98c0      	CBI  0x18,0
0000ba 9ac1      	SBI  0x18,1
0000bb c00e      	RJMP _0x30
                 ;      74   case 1:{line1=0;line2=1;PORTD=diodes[l_o[cur_line]];break;};
                 _0xE:
0000bc 30e1      	CPI  R30,LOW(0x1)
0000bd f419      	BRNE _0x13
0000be 98c1      	CBI  0x18,1
0000bf 9ac7      	SBI  0x18,7
0000c0 c009      	RJMP _0x30
                 ;      75   case 2:{line2=0;line3=1;PORTD=diodes[l_o[cur_line]];break;};
                 _0x13:
0000c1 30e2      	CPI  R30,LOW(0x2)
0000c2 f419      	BRNE _0x18
0000c3 98c7      	CBI  0x18,7
0000c4 9ac6      	SBI  0x18,6
0000c5 c004      	RJMP _0x30
                 ;      76   case 3:{line3=0;line4=1;PORTD=diodes[l_o[cur_line]];break;};
                 _0x18:
0000c6 30e3      	CPI  R30,LOW(0x3)
0000c7 f461      	BRNE _0xD
0000c8 98c6      	CBI  0x18,6
0000c9 9ac0      	SBI  0x18,0
                 _0x30:
0000ca 2de5      	MOV  R30,R5
0000cb e0f0      	LDI  R31,0
0000cc 5ae0      	SUBI R30,LOW(-_l_o)
0000cd 4ffe      	SBCI R31,HIGH(-_l_o)
0000ce 81e0      	LD   R30,Z
0000cf e0f0      	LDI  R31,0
0000d0 5dea      	SUBI R30,LOW(-_diodes*2)
0000d1 4fff      	SBCI R31,HIGH(-_diodes*2)
0000d2 9004      	LPM  R0,Z
0000d3 ba02      	OUT  0x12,R0
                 ;      77   }
                 _0xD:
                 ;      78 
                 ;      79   cur_line++;
0000d4 9453      	INC  R5
                 ;      80   if (cur_line==4) cur_line=0;
0000d5 e0e4      	LDI  R30,LOW(4)
0000d6 15e5      	CP   R30,R5
0000d7 f409      	BRNE _0x22
0000d8 2455      	CLR  R5
                 ;      81 
                 ;      82 }
                 _0x22:
0000d9 91e9      	LD   R30,Y+
0000da bfef      	OUT  SREG,R30
0000db 91f9      	LD   R31,Y+
0000dc 91e9      	LD   R30,Y+
0000dd 9009      	LD   R0,Y+
0000de 9518      	RETI
                 ;      83 
                 ;      84 // Timer 2 output compare interrupt service routine
                 ;      85 interrupt [TIM2_COMP] void timer2_comp_isr(void)
                 ;      86 {
                 _timer2_comp_isr:
0000df 93ea      	ST   -Y,R30
                 ;      87 PORTB=0x00;
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 bbe8      	OUT  0x18,R30
                 ;      88 }
0000e2 91e9      	LD   R30,Y+
0000e3 9518      	RETI
                 ;      89 
                 ;      90 // Declare your global variables here
                 ;      91 
                 ;      92 void main(void)
                 ;      93 {
                 _main:
                 ;      94 // Declare your local variables here
                 ;      95 
                 ;      96 // Input/Output Ports initialization
                 ;      97 // Port B initialization
                 ;      98 PORTB=0x00;
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 bbe8      	OUT  0x18,R30
                 ;      99 DDRB=0xC3;
0000e6 ece3      	LDI  R30,LOW(195)
0000e7 bbe7      	OUT  0x17,R30
                 ;     100 
                 ;     101 // Port C initialization
                 ;     102 PORTC=0x00;
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bbe5      	OUT  0x15,R30
                 ;     103 DDRC=0x00;
0000ea bbe4      	OUT  0x14,R30
                 ;     104 
                 ;     105 // Port D initialization
                 ;     106 PORTD=0x04;
0000eb e0e4      	LDI  R30,LOW(4)
0000ec bbe2      	OUT  0x12,R30
                 ;     107 DDRD=0x7B;
0000ed e7eb      	LDI  R30,LOW(123)
0000ee bbe1      	OUT  0x11,R30
                 ;     108 
                 ;     109 // Timer/Counter 1 initialization
                 ;     110 TCCR1A=0x00;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 bdef      	OUT  0x2F,R30
                 ;     111 TCCR1B=0x05;
0000f1 e0e5      	LDI  R30,LOW(5)
0000f2 bdee      	OUT  0x2E,R30
                 ;     112 TCNT1=0x0000;
0000f3 e0e0      	LDI  R30,LOW(0)
0000f4 e0f0      	LDI  R31,HIGH(0)
0000f5 bdfd      	OUT  0x2C+1,R31
0000f6 bdec      	OUT  0x2C,R30
                 ;     113 ICR1H=0x00;
0000f7 bde7      	OUT  0x27,R30
                 ;     114 ICR1L=0x00;
0000f8 bde6      	OUT  0x26,R30
                 ;     115 OCR1AH=0x07;
0000f9 e0e7      	LDI  R30,LOW(7)
0000fa bdeb      	OUT  0x2B,R30
                 ;     116 OCR1AL=0xB7;
0000fb ebe7      	LDI  R30,LOW(183)
0000fc bdea      	OUT  0x2A,R30
                 ;     117 OCR1BH=0x00;
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bde9      	OUT  0x29,R30
                 ;     118 OCR1BL=0x00;
0000ff bde8      	OUT  0x28,R30
                 ;     119 
                 ;     120 // Timer/Counter 2 initialization
                 ;     121 ASSR=0x00;
000100 bde2      	OUT  0x22,R30
                 ;     122 TCCR2=0x04;
000101 e0e4      	LDI  R30,LOW(4)
000102 bde5      	OUT  0x25,R30
                 ;     123 TCNT2=0x00;
000103 e0e0      	LDI  R30,LOW(0)
000104 bde4      	OUT  0x24,R30
                 ;     124 OCR2=0x60;
000105 e6e0      	LDI  R30,LOW(96)
000106 bde3      	OUT  0x23,R30
                 ;     125 
                 ;     126 // External Interrupt(s) initialization
                 ;     127 GICR|=0x40;
000107 b7eb      	IN   R30,0x3B
000108 64e0      	ORI  R30,0x40
000109 bfeb      	OUT  0x3B,R30
                 ;     128 MCUCR=0x03;
00010a e0e3      	LDI  R30,LOW(3)
00010b bfe5      	OUT  0x35,R30
                 ;     129 GIFR=0x40;
00010c e4e0      	LDI  R30,LOW(64)
00010d bfea      	OUT  0x3A,R30
                 ;     130 
                 ;     131 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ;     132 TIMSK=0x40;
00010e bfe9      	OUT  0x39,R30
                 ;     133 
                 ;     134 // Analog Comparator initialization
                 ;     135 ACSR=0x80;
00010f e8e0      	LDI  R30,LOW(128)
000110 b9e8      	OUT  0x8,R30
                 ;     136 SFIOR=0x00;
000111 e0e0      	LDI  R30,LOW(0)
000112 bfe0      	OUT  0x30,R30
                 ;     137 
                 ;     138 // Global enable interrupts
                 ;     139 #asm("sei")
000113 9478      	sei
                 ;     140 
                 ;     141 l_o[0]=7;l_o[1]=7;l_o[2]=7;l_o[3]=7;
000114 e0e7      	LDI  R30,LOW(7)
000115 93e0 0160 	STS  _l_o,R30
000117 93e0 0161 	__PUTB1MN _l_o,1
000119 93e0 0162 	__PUTB1MN _l_o,2
00011b 93e0 0163 	__PUTB1MN _l_o,3
                 ;     142 delay_ms(300);
00011d e2ec      	LDI  R30,LOW(300)
00011e e0f1      	LDI  R31,HIGH(300)
00011f 93fa      	ST   -Y,R31
000120 93ea      	ST   -Y,R30
000121 d04c      	RCALL _delay_ms
                 ;     143 
                 ;     144 for (y=4;y>0;y--)
000122 e0e4      	LDI  R30,LOW(4)
000123 e0f0      	LDI  R31,HIGH(4)
000124 015f      	MOVW R10,R30
                 _0x24:
000125 2400      	CLR  R0
000126 140a      	CP   R0,R10
000127 040b      	CPC  R0,R11
000128 f4ec      	BRGE _0x25
                 ;     145   {
                 ;     146   for (x=6;x>=1;x--)
000129 e0e6      	LDI  R30,LOW(6)
00012a e0f0      	LDI  R31,HIGH(6)
00012b 014f      	MOVW R8,R30
                 _0x27:
00012c e0e1      	LDI  R30,LOW(1)
00012d e0f0      	LDI  R31,HIGH(1)
00012e 168e      	CP   R8,R30
00012f 069f      	CPC  R9,R31
000130 f08c      	BRLT _0x28
                 ;     147     {
                 ;     148     l_o[y-1]=x-1;
000131 01f5      	MOVW R30,R10
000132 9731      	SBIW R30,1
000133 5ae0      	SUBI R30,LOW(-_l_o)
000134 4ffe      	SBCI R31,HIGH(-_l_o)
000135 01df      	MOVW R26,R30
000136 01f4      	MOVW R30,R8
000137 9731      	SBIW R30,1
000138 93ec      	ST   X,R30
                 ;     149     delay_ms(25);
000139 e1e9      	LDI  R30,LOW(25)
00013a e0f0      	LDI  R31,HIGH(25)
00013b 93fa      	ST   -Y,R31
00013c 93ea      	ST   -Y,R30
00013d d030      	RCALL _delay_ms
                 ;     150     }
00013e 01f4      	MOVW R30,R8
00013f 9731      	SBIW R30,1
000140 014f      	MOVW R8,R30
000141 cfea      	RJMP _0x27
                 _0x28:
                 ;     151 
                 ;     152   }
000142 01f5      	MOVW R30,R10
000143 9731      	SBIW R30,1
000144 015f      	MOVW R10,R30
000145 cfdf      	RJMP _0x24
                 _0x25:
                 ;     153 TIMSK=0x50;
000146 e5e0      	LDI  R30,LOW(80)
000147 bfe9      	OUT  0x39,R30
                 ;     154 
                 ;     155 while (1)
                 _0x29:
                 ;     156       {
                 ;     157       if (PINC.0==1) TIMSK=0xD0;
000148 9b98      	SBIS 0x13,0
000149 c002      	RJMP _0x2C
00014a ede0      	LDI  R30,LOW(208)
00014b c001      	RJMP _0x31
                 ;     158       else TIMSK=0x50;
                 _0x2C:
00014c e5e0      	LDI  R30,LOW(80)
                 _0x31:
00014d bfe9      	OUT  0x39,R30
                 ;     159       num = 1875/indication;  // 1875 for value of division 250 | 2343 - 200 | 1562 - 300
00014e 01f3      	MOVW R30,R6
00014f e5a3      	LDI  R26,LOW(1875)
000150 e0b7      	LDI  R27,HIGH(1875)
000151 d02c      	RCALL __DIVW21U
000152 016f      	MOVW R12,R30
                 ;     160       l = (num-(num%6))/6;
000153 01d6      	MOVW R26,R12
000154 e0e6      	LDI  R30,LOW(6)
000155 e0f0      	LDI  R31,HIGH(6)
000156 d03f      	RCALL __MODW21
000157 01df      	MOVW R26,R30
000158 01f6      	MOVW R30,R12
000159 1bea      	SUB  R30,R26
00015a 0bfb      	SBC  R31,R27
00015b 01df      	MOVW R26,R30
00015c e0e6      	LDI  R30,LOW(6)
00015d e0f0      	LDI  R31,HIGH(6)
00015e d032      	RCALL __DIVW21
00015f 93e0 0164 	STS  _l,R30
000161 93f0 0165 	STS  _l+1,R31
                 ;     161       s = num%6;
000163 01d6      	MOVW R26,R12
000164 e0e6      	LDI  R30,LOW(6)
000165 e0f0      	LDI  R31,HIGH(6)
000166 d02f      	RCALL __MODW21
000167 93e0 0166 	STS  _s,R30
000169 93f0 0167 	STS  _s+1,R31
                 ;     162       recoding();
00016b dedb      	RCALL _recoding
                 ;     163       }
00016c cfdb      	RJMP _0x29
                 ;     164 }
                 _0x2E:
00016d cfff      	RJMP _0x2E
                 
                 
                 _delay_ms:
00016e 91e9      	ld   r30,y+
00016f 91f9      	ld   r31,y+
000170 9630      	adiw r30,0
000171 f039      	breq __delay_ms1
                 __delay_ms0:
000172 ed80
000173 e097
000174 9701
000175 f7f1      	__DELAY_USW 0x7D0
000176 95a8      	wdr
000177 9731      	sbiw r30,1
000178 f7c9      	brne __delay_ms0
                 __delay_ms1:
000179 9508      	ret
                 
                 __ANEGW1:
00017a 95f1      	NEG  R31
00017b 95e1      	NEG  R30
00017c 40f0      	SBCI R31,0
00017d 9508      	RET
                 
                 __DIVW21U:
00017e 2400      	CLR  R0
00017f 2411      	CLR  R1
000180 e190      	LDI  R25,16
                 __DIVW21U1:
000181 0faa      	LSL  R26
000182 1fbb      	ROL  R27
000183 1c00      	ROL  R0
000184 1c11      	ROL  R1
000185 1a0e      	SUB  R0,R30
000186 0a1f      	SBC  R1,R31
000187 f418      	BRCC __DIVW21U2
000188 0e0e      	ADD  R0,R30
000189 1e1f      	ADC  R1,R31
00018a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00018b 60a1      	SBR  R26,1
                 __DIVW21U3:
00018c 959a      	DEC  R25
00018d f799      	BRNE __DIVW21U1
00018e 01fd      	MOVW R30,R26
00018f 01d0      	MOVW R26,R0
000190 9508      	RET
                 
                 __DIVW21:
000191 d012      	RCALL __CHKSIGNW
000192 dfeb      	RCALL __DIVW21U
000193 f40e      	BRTC __DIVW211
000194 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000195 9508      	RET
                 
                 __MODW21:
000196 94e8      	CLT
000197 ffb7      	SBRS R27,7
000198 c004      	RJMP __MODW211
000199 95a0      	COM  R26
00019a 95b0      	COM  R27
00019b 9611      	ADIW R26,1
00019c 9468      	SET
                 __MODW211:
00019d fdf7      	SBRC R31,7
00019e dfdb      	RCALL __ANEGW1
00019f dfde      	RCALL __DIVW21U
0001a0 01fd      	MOVW R30,R26
0001a1 f40e      	BRTC __MODW212
0001a2 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001a3 9508      	RET
                 
                 __CHKSIGNW:
0001a4 94e8      	CLT
0001a5 fff7      	SBRS R31,7
0001a6 c002      	RJMP __CHKSW1
0001a7 dfd2      	RCALL __ANEGW1
0001a8 9468      	SET
                 __CHKSW1:
0001a9 ffb7      	SBRS R27,7
0001aa c006      	RJMP __CHKSW2
0001ab 95a0      	COM  R26
0001ac 95b0      	COM  R27
0001ad 9611      	ADIW R26,1
0001ae f800      	BLD  R0,0
0001af 9403      	INC  R0
0001b0 fa00      	BST  R0,0
                 __CHKSW2:
0001b1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  19 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   5 r6 :   3 r7 :   1 
r8 :   5 r9 :   1 r10:   5 r11:   1 r12:   4 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  30 r27:  12 r28:   1 r29:   1 r30: 176 r31:  51 
x  :   7 y  :  22 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega8 instruction use summary:
adc   :   1 add   :   1 adiw  :   3 and   :   0 andi  :   0 asr   :   0 
bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 
break :   0 breq  :   2 brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   1 brmi  :   0 brne  :  16 brpl  :   0 
brsh  :   0 brtc  :   2 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   1 cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 
cln   :   0 clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 
com   :   4 cp    :   3 cpc   :   6 cpi   :   8 cpse  :   0 dec   :   2 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 ld    :  10 ldd   :   0 ldi   :  84 lds   :   9 
lpm   :   8 lsl   :   1 lsr   :   0 mov   :   2 movw  :  23 mul   :   0 
muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   1 
out   :  43 pop   :   0 push  :   0 rcall :  14 ret   :   7 reti  :   3 
rjmp  :  39 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 sbi   :   4 
sbic  :   0 sbis  :   1 sbiw  :  10 sbr   :   1 sbrc  :   1 sbrs  :   3 
sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 
set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  20 
std   :   0 sts   :  22 sub   :   2 subi  :   3 swap  :   0 tst   :   0 
wdr   :   1 
Instructions used: 52 out of 109 (47.7%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000364    858     10    868    8192  10.6%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
